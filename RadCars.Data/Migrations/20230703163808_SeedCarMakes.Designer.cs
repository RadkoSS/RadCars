// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RadCars.Data;

#nullable disable

namespace RadCars.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230703163808_SeedCarMakes")]
    partial class SeedCarMakes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RadCars.Data.Models.Entities.CarMake", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CarMakes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Acura"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Alfa Romeo"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Aston Martin"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Audi"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Bentley"
                        },
                        new
                        {
                            Id = 6,
                            Name = "BMW"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Brilliance"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Bugatti"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Buick"
                        },
                        new
                        {
                            Id = 10,
                            Name = "BYD"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Cadillac"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Changan"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Chery"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Chevrolet"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Chrysler"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Citroen"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Dacia"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Daewoo"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Daihatsu"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Datsun"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Dodge"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Dongfeng"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Exeed"
                        },
                        new
                        {
                            Id = 24,
                            Name = "FAW"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Ferrari"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Fiat"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Fisker"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Ford"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Foton"
                        },
                        new
                        {
                            Id = 30,
                            Name = "GAC"
                        },
                        new
                        {
                            Id = 31,
                            Name = "GAZ"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Geely"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Genesis"
                        },
                        new
                        {
                            Id = 34,
                            Name = "GMC"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Great Wall"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Haval"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Holden"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Honda"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Hummer"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Hyundai"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Infiniti"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Isuzu"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Iveco"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Jac"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Jaguar"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Jeep"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Kia"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Lamborghini"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Lancia"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Land Rover"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Lexus"
                        },
                        new
                        {
                            Id = 52,
                            Name = "Lifan"
                        },
                        new
                        {
                            Id = 53,
                            Name = "Lincoln"
                        },
                        new
                        {
                            Id = 54,
                            Name = "Lotus"
                        },
                        new
                        {
                            Id = 55,
                            Name = "Marussia"
                        },
                        new
                        {
                            Id = 56,
                            Name = "Maserati"
                        },
                        new
                        {
                            Id = 57,
                            Name = "Maybach"
                        },
                        new
                        {
                            Id = 58,
                            Name = "Mazda"
                        },
                        new
                        {
                            Id = 59,
                            Name = "McLaren"
                        },
                        new
                        {
                            Id = 60,
                            Name = "Mercedes"
                        },
                        new
                        {
                            Id = 61,
                            Name = "Mercury"
                        },
                        new
                        {
                            Id = 62,
                            Name = "MG"
                        },
                        new
                        {
                            Id = 63,
                            Name = "Mini"
                        },
                        new
                        {
                            Id = 64,
                            Name = "Mitsubishi"
                        },
                        new
                        {
                            Id = 65,
                            Name = "Nissan"
                        },
                        new
                        {
                            Id = 66,
                            Name = "Opel"
                        },
                        new
                        {
                            Id = 67,
                            Name = "Peugeot"
                        },
                        new
                        {
                            Id = 68,
                            Name = "Plymouth"
                        },
                        new
                        {
                            Id = 69,
                            Name = "Pontiac"
                        },
                        new
                        {
                            Id = 70,
                            Name = "Porsche"
                        },
                        new
                        {
                            Id = 71,
                            Name = "Ravon"
                        },
                        new
                        {
                            Id = 72,
                            Name = "Renault"
                        },
                        new
                        {
                            Id = 73,
                            Name = "Rolls-Royce"
                        },
                        new
                        {
                            Id = 74,
                            Name = "Rover"
                        },
                        new
                        {
                            Id = 75,
                            Name = "Saab"
                        },
                        new
                        {
                            Id = 76,
                            Name = "Saturn"
                        },
                        new
                        {
                            Id = 77,
                            Name = "Scion"
                        },
                        new
                        {
                            Id = 78,
                            Name = "Seat"
                        },
                        new
                        {
                            Id = 79,
                            Name = "Skoda"
                        },
                        new
                        {
                            Id = 80,
                            Name = "Smart"
                        },
                        new
                        {
                            Id = 81,
                            Name = "Ssang Yong"
                        },
                        new
                        {
                            Id = 82,
                            Name = "Subaru"
                        },
                        new
                        {
                            Id = 83,
                            Name = "Suzuki"
                        },
                        new
                        {
                            Id = 84,
                            Name = "Tesla"
                        },
                        new
                        {
                            Id = 85,
                            Name = "Toyota"
                        },
                        new
                        {
                            Id = 86,
                            Name = "UAZ"
                        },
                        new
                        {
                            Id = 87,
                            Name = "VAZ"
                        },
                        new
                        {
                            Id = 88,
                            Name = "Volkswagen"
                        },
                        new
                        {
                            Id = 89,
                            Name = "Volvo"
                        });
                });

            modelBuilder.Entity("RadCars.Data.Models.Entities.CarModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CarMakeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.HasIndex("CarMakeId");

                    b.ToTable("CarModels");
                });

            modelBuilder.Entity("RadCars.Data.Models.Entities.CarPicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ListingId");

                    b.ToTable("CarPictures");
                });

            modelBuilder.Entity("RadCars.Data.Models.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("RadCars.Data.Models.Entities.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("RadCars.Data.Models.Entities.Listing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CarMakeId")
                        .HasColumnType("int");

                    b.Property<int>("CarModelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<DateTime?>("EditedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EngineModel")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("EngineType")
                        .HasColumnType("int");

                    b.Property<long>("Mileage")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ThumbnailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("VinNumber")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarMakeId");

                    b.HasIndex("CarModelId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ThumbnailId");

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("RadCars.Data.Models.Entities.ListingFeature", b =>
                {
                    b.Property<Guid>("ListingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.HasKey("ListingId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("ListingFeatures");
                });

            modelBuilder.Entity("RadCars.Data.Models.Entities.UserFavoriteListing", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "ListingId");

                    b.HasIndex("ListingId");

                    b.ToTable("UserFavoriteListings");
                });

            modelBuilder.Entity("RadCars.Data.Models.User.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("RadCars.Data.Models.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("RadCars.Data.Models.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RadCars.Data.Models.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("RadCars.Data.Models.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RadCars.Data.Models.Entities.CarModel", b =>
                {
                    b.HasOne("RadCars.Data.Models.Entities.CarMake", "CarMake")
                        .WithMany("Models")
                        .HasForeignKey("CarMakeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CarMake");
                });

            modelBuilder.Entity("RadCars.Data.Models.Entities.CarPicture", b =>
                {
                    b.HasOne("RadCars.Data.Models.Entities.Listing", "Listing")
                        .WithMany("Pictures")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("RadCars.Data.Models.Entities.Feature", b =>
                {
                    b.HasOne("RadCars.Data.Models.Entities.Category", "Category")
                        .WithMany("Features")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("RadCars.Data.Models.Entities.Listing", b =>
                {
                    b.HasOne("RadCars.Data.Models.Entities.CarMake", "CarMake")
                        .WithMany()
                        .HasForeignKey("CarMakeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RadCars.Data.Models.Entities.CarModel", "CarModel")
                        .WithMany()
                        .HasForeignKey("CarModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RadCars.Data.Models.User.ApplicationUser", "Creator")
                        .WithMany("Listings")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RadCars.Data.Models.Entities.CarPicture", "Thumbnail")
                        .WithMany()
                        .HasForeignKey("ThumbnailId");

                    b.Navigation("CarMake");

                    b.Navigation("CarModel");

                    b.Navigation("Creator");

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("RadCars.Data.Models.Entities.ListingFeature", b =>
                {
                    b.HasOne("RadCars.Data.Models.Entities.Feature", "Feature")
                        .WithMany("ListingFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RadCars.Data.Models.Entities.Listing", "Listing")
                        .WithMany("ListingFeatures")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("RadCars.Data.Models.Entities.UserFavoriteListing", b =>
                {
                    b.HasOne("RadCars.Data.Models.Entities.Listing", "Listing")
                        .WithMany("Favorites")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RadCars.Data.Models.User.ApplicationUser", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Listing");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RadCars.Data.Models.Entities.CarMake", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("RadCars.Data.Models.Entities.Category", b =>
                {
                    b.Navigation("Features");
                });

            modelBuilder.Entity("RadCars.Data.Models.Entities.Feature", b =>
                {
                    b.Navigation("ListingFeatures");
                });

            modelBuilder.Entity("RadCars.Data.Models.Entities.Listing", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("ListingFeatures");

                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("RadCars.Data.Models.User.ApplicationUser", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Listings");
                });
#pragma warning restore 612, 618
        }
    }
}
